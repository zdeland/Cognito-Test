using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Facebook.Unity;
using System;

public class InitializeFacebook : MonoBehaviour {

    public GameObject NotLoggedInCanvas;
    public GameObject LoggedInCanvas;
    public GameObject Friend;
    private static string applink = "https://fb.me/2314752818750351"; //generated by Facebook https://developers.facebook.com/quickstarts/2314456792113287/?platform=app-links-host

    // Use this for initialization
    void Awake()
    {
        if (!FB.IsInitialized)
        {
            FB.Init(initCallBack);
            LoggedInCanvas.SetActive(false);
            NotLoggedInCanvas.SetActive(true); 
        }
    }

    void initCallBack()
    {
        Debug.Log("Facebook is initialized");
    }

    public void Login()
    {
        Debug.Log("Login Button CLicked...");
        if (!FB.IsLoggedIn)
        {
            FB.LogInWithReadPermissions(new List<string> {"user_friends"},LoginCallBack);
        }
        else
        {
            Debug.Log("You are already logged into Facebook");
            ShowUI();
        }
    }

    public void Logout()
    {
        if (FB.IsLoggedIn)
        {
            FB.LogOut();
            Debug.Log("You have logged out of Facebook");
            ShowUI();
        }
    }

    void LoginCallBack(ILoginResult result)
    {
        if (result.Error != null)
            Debug.Log("Error during login: "+result.Error);
        else
        {
            Debug.Log("You have logged into Facebook");
            ShowUI();
        }         
    }

    void ShowUI()
    {
        if (FB.IsLoggedIn)
        {
            LoggedInCanvas.SetActive(true);
            NotLoggedInCanvas.SetActive(false);
            FB.API("me/picture?width=100&height=100",HttpMethod.GET,PictureCallBack);
            FB.API("me?fields=first_name", HttpMethod.GET, NameCallBack);
            FB.API("me/friends", HttpMethod.GET, FriendsCallBack);
            FB.GetAppLink(AppLinkCallBack);
        }           
        else
        {
            LoggedInCanvas.SetActive(false);
            NotLoggedInCanvas.SetActive(true);
        }
    }

    void AppLinkCallBack(IAppLinkResult result)
    {
        if (String.IsNullOrEmpty(result.Error))
        {
            Debug.Log("Applink Done: "+result.RawResult);
            IDictionary<string, object> dictio = result.ResultDictionary;
            if (dictio.ContainsKey("target_url"))
            {
                string url = dictio["target_url"].ToString();
                string keyword = "request_ids = ";
                int k = 0;
                while (k < url.Length - keyword.Length && !url.Substring(k, keyword.Length).Equals(keyword))
                    k++;
                k += keyword.Length;
                int x = k;
                while (url[x] != '&' && url[x] != '%')
                    x++;
                string id = url.Substring(k, x - k);
                Debug.Log("ID = "+id);
                FB.API("/"+id+"_"+AccessToken.CurrentAccessToken.UserId,HttpMethod.GET,RequestCallBack);
            }
        }
        else
        {
            Debug.Log("Applink Error: " + result.Error);
        }
    }

    void RequestCallBack(IGraphResult result)
    {
        if (String.IsNullOrEmpty(result.Error))
        {
            Debug.Log("Request error: " + result.Error);
        }
        else
        {
            Debug.Log("Request was successfull: "+result.RawResult);
        }
    }

    void PictureCallBack(IGraphResult result)
    {
        Texture2D image = result.Texture;
        LoggedInCanvas.transform.FindChild("Profile Picture").GetComponent<Image>().sprite = Sprite.Create(image, new Rect(0, 0, 100, 100), new Vector2(0.5f, 0.5f));
    }

    void NameCallBack(IGraphResult result)
    {
        IDictionary<string, object> profile = result.ResultDictionary;
        LoggedInCanvas.transform.FindChild("Name").GetComponent<Text>().text = "Hello, " + profile["first_name"];
    }

    public void Share()
    {
        Debug.Log("Share button clicked");
        FB.ShareLink(new System.Uri("http://google.com"),"Testing FB SDK from inside Unity","Simple description text", new System.Uri("https://goo.gl/images/3e7tyu"));
    }

    public void Invite()
    {
        Debug.Log("Invite button clicked.");
        FB.AppRequest(
            "Invite V1 - Come play my Cognito game!",
            null, null, null, null, null, null,
            delegate (IAppRequestResult result) {
                Debug.Log("Basic invite was successful: "+result.RawResult);
            }
        );
        //TODO create facebook app link the works for android and ios below
        //FB.Mobile.AppInvite(new System.Uri(applink), new System.Uri("https://goo.gl/images/3e7tyu"),InviteCallBack);
    }

    public void ChallengeFriend()
    {
        FB.AppRequest("I challenge you to try Cognito Test!",null, null, null, null, null, null,ChallengeCallBack);
    }

    void ChallengeCallBack(IAppRequestResult result)
    {
        if (result.Cancelled)
        {
            Debug.Log("Challenge was cancelled...");
        }
        else if (!String.IsNullOrEmpty(result.Error))
        {
            Debug.Log("Challenge error occurred: " + result.Error);
        }
        else
        {
            Debug.Log("Challenge was successful: " + result.RawResult);
        }
    }

    void InviteCallBack(IAppInviteResult result)
    {
        if (result.Cancelled)
        {
            Debug.Log("Invite was cancelled...");
        }
        else if (!String.IsNullOrEmpty(result.Error))
        {
            Debug.Log("Invite error occurred: "+result.Error);
        }
        else
        {
            Debug.Log("Invite was successful: " + result.RawResult);
        }
    }

    void FriendsCallBack(IGraphResult result)
    {
        Debug.Log(result.RawResult);
        IDictionary<string,object> data = result.ResultDictionary;
        List<object> friends = (List<object>)data["data"];

        foreach (object obj in friends)
        {
            Dictionary<string, object> friend = (Dictionary<string, object>) obj;
            CreateFriend(friend["name"].ToString(),friend["id"].ToString());
        }
    }

    void CreateFriend(string name, string id)
    {
        GameObject myFriend = Instantiate(Friend);
        Transform parent = LoggedInCanvas.transform.FindChild("FriendsListPanel").FindChild("FriendsListImage");
        myFriend.transform.SetParent(parent);
        myFriend.GetComponentInChildren<Text>().text = name;
        FB.API(id+"/picture?width=100&height=100", HttpMethod.GET, delegate(IGraphResult result) {
            myFriend.GetComponentInChildren<Image>().sprite = Sprite.Create(result.Texture, new Rect(0, 0, 100, 100), new Vector2(0.5f, 0.5f));
        });
        
    }
}
